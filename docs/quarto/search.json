[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Enough Markdown to Write a Thesis",
    "section": "",
    "text": "1 Introduction\nFigure 1.1: Traditional non-reproducible workflow for writing a report or manuscript (left) with copy and paste, and the reproducible quarto workflow (right) with code and text in the same document.\nThe traditional way to write a report, manuscript or thesis is to run the analyses in R or some other software and then copy the figures, tables etc. into a word processor. Then you find an error in the code or data and need to repeat the process. Repeatedly.\nThis is very inefficient and error prone: there is a better way.\nQuarto lets you have the code and the text in one document. If the code or the data are updated, new versions of the figures and tables are automatically generated and inserted into the corrected document. This is a much more reproducible process.\nThis book is written with Quarto.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#organisation-of-this-book",
    "href": "index.html#organisation-of-this-book",
    "title": "Enough Markdown to Write a Thesis",
    "section": "\n1.1 Organisation of this book",
    "text": "1.1 Organisation of this book\nFirst Steps with Quarto shows you how to create a quarto document, edit it, add figures and tables, and render it as a finished document.\nTowards a Thesis shows you how author a manuscript, report or thesis in quarto by adding citations and cross-references to figures and tables.\nFixing Problems The final section has some trouble shooting suggestions.\n\n\n\n\n\n\nQuarto and R markdown\n\n\n\nQuarto is based on R markdown. If you know how to use R markdown, you know how to use quarto as almost any R markdown document should also work with quarto.\nThere are several improvements in quarto over R markdown which make it easier to use.\n\nNo need to remember different behaviour and capabilities of rmarkdown vs bookdown etc.\nSimplified cross-references\nBetter support for multiple programming languages\n\n\n\n\n\n\n\n\n\nBefore you start\n\n\n\nYou will need to have installed\n\n\nRStudio (version 2023.12 or newer)\nR\n\nquarto. RStudio should have installed this already.\nquarto R package (install.packages(\"quarto\"))\n\nIf you cannot install quarto on your computer (perhaps because of permission problems), either use the Rmarkdown tutorial, or use posit.cloud.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "02-getting-started-with-quarto.html",
    "href": "02-getting-started-with-quarto.html",
    "title": "\n2  Getting started\n",
    "section": "",
    "text": "2.1 Creating an quarto file\nAn quarto file is a plain text file. You can create a new text file, give it the “.qmd” extension, and start typing. But it is better to use RStudio.\nOn the RStudio menu, go to\nThe first time you make a quarto document, you may be asked to install some extra packages. Now you will have a pop-up window asking for the Title, author and output format (Figure 2.1). Make sure the “Use visual markdown editor” option is ticked.\nFigure 2.1: Choose the output format\nYou can fill these in now, or edit the document later. I recommend you start with “HTML” format as is doesn’t require any other software to be installed. When you are ready, click OK, and a new quarto file will open. It will look something like Figure 2.2\nFigure 2.2: The default quarto document.\nYou will learn about the elements of this file in Chapter 3.",
    "crumbs": [
      "First Steps with Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "02-getting-started-with-quarto.html#creating-an-quarto-file",
    "href": "02-getting-started-with-quarto.html#creating-an-quarto-file",
    "title": "\n2  Getting started\n",
    "section": "",
    "text": "File\n\n\nNew File\n\n\nQuarto Document…\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIf you don’t see the “Quarto Document…” option, check you have quarto installed.\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nCreate an quarto document with output format HTML.",
    "crumbs": [
      "First Steps with Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "02-getting-started-with-quarto.html#rendering-the-quarto-document",
    "href": "02-getting-started-with-quarto.html#rendering-the-quarto-document",
    "title": "\n2  Getting started\n",
    "section": "\n2.2 Rendering the quarto document",
    "text": "2.2 Rendering the quarto document\nThe first time you render the document, you will be asked to save it.\n\n\n\n\n\n\nFile names\n\n\n\nThe most important rule for naming your quarto document it that there must be no spaces. If there are spaces, you can get all sorts of strange errors.\nThe second rule is that if there is a “.” in your file name, it will confuse RStudio into thinking that you have added an extension. You then have to add the “.qmd” yourself or RStudio won’t treat the file properly. It is easiest to avoid “.” and use “-” or “_” to separate words in the file name.\n\n\nYou can see the rendered quarto document by rendering it. Click the blue “Render” button which is above the document.\n\n\n\n\n\n\n\nFigure 2.3: The render button\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nRender your quarto document and examine the output. If it worked then everything is set up correctly.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nFor the rest of this tutorial, we will analyse plant trait data from Svalbard and make a reproducible report.\nTo download the data and quarto document, you need to run\n\n# install.packages(\"usethis\") # if you don't have it already.\nusethis::use_course(\"biostats-r/svalbardQuartoDemo\")\n\nThen follow the instructions. This will open the svalbardQuartoDemo Rstudio project.\nOpen the file svalbard_traits.qmd and render it. The output is a bit of a mess - we are going to make it better!",
    "crumbs": [
      "First Steps with Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "03-elements-quarto-document.html",
    "href": "03-elements-quarto-document.html",
    "title": "3  Elements of an quarto file",
    "section": "",
    "text": "3.1 YAML\nThe YAML is metadata for the document that goes right at the top of the file between two sets of three dashes. The YAML consists of key: values pairs. The colon and space are required. Rstudio will autocomplete the keys.\nThe YAML can set the document author and title, the output format and many other things.",
    "crumbs": [
      "First Steps with Quarto",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Elements of an quarto file</span>"
    ]
  },
  {
    "objectID": "03-elements-quarto-document.html#yaml",
    "href": "03-elements-quarto-document.html#yaml",
    "title": "3  Elements of an quarto file",
    "section": "",
    "text": "---\ntitle: \"My Manuscript\"\nformat: html\ndate: 2022-04-03\n---\n\n\n\n\n\n\n\nWhite space\n\n\n\nYAML is sensitive to white space. For example, you must have the space after the colon.\n\n\n\n\n\n\n\n\nToday’s date\n\n\n\nWith the keyword today, you can make the document report the date it was rendered.\n---\ntitle: \"My Manuscript\"\nformat: html\ndate: today\n---\n\n\n\n\n\n\n\n\nExercise\n\n\n\nAdd date and author keys to the YAML of your svalbard_traits quarto document so that the rendered document shows today’s date and your name.\n\n\n\n3.1.1 Output formats\nQuarto documents can be rendered in about 40 formats! The format can be specified when the quarto file is created in RStudio or by editing the YAML.\nProducing an html file to view in a browser is the simplest, as no extra software needs installing. The YAML should look something like this.\n---\ntitle: \"My Manuscript\"\nformat: html\n---\nWord documents are also easy; just change the format to docx. This can be very useful if you have a supervisor or collaborators who cannot cope with markdown directly.\nThere are two ways to render a quarto file as a PDF. The easiest is to change the format to typst.\n---\ntitle: \"My Manuscript\"\nformat: typst\n---\nTypst comes bundled with quarto. It is very fast and easier to debug than the alternative. However, typst is very new and not yet supported by many journals for manuscript submission.\n\n\n\n\n\n\nQuarto, PDF and LaTeX\n\n\n\nLaTeX is an alternative way to produce PDF from quarto documents (you don’t need to learn any LaTeX). It requires some external tools to be installed, which can be done with the tinytxt package.\n\n# run this only once\ninstall.packages(\"tinytex\")\ntinytex::install_tinytex()\n\nThen the format in the YAML can be changed to pdf.\n---\ntitle: \"My Manuscript\"\nformat: pdf\n---\nYou don’t need to know any LaTeX, but you can include some if you want to change the formatting etc. For example, you force a new page, you could use the command.\n\\\\newpage\n\n\nWith PDF documents, it can be tricky to control exactly where the figures are positioned, so I recommend working with html as long as possible.\n\n\n\n\n\n\nCoauthoring with quarto\n\n\n\nPerhaps the best way to collaborate with coauthors on a quarto document is to use version control for example with GitHub.\nAn alternative is to use the trackdown package to upload markdown files to Google Drive where they can be edited and then downloaded again.",
    "crumbs": [
      "First Steps with Quarto",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Elements of an quarto file</span>"
    ]
  },
  {
    "objectID": "03-elements-quarto-document.html#text",
    "href": "03-elements-quarto-document.html#text",
    "title": "3  Elements of an quarto file",
    "section": "\n3.2 Text",
    "text": "3.2 Text\nType to make text! In the visual editor, you can format the text in much the same way you would work in MS word or LibreOffice. RStudio has a built-in spell checker that will underline words it doesn’t recognise in red.\n\n\n\n\n\n\nComments\n\n\n\nA comment in an R code block starts with a #, just as in an ordinary R script.\nA comment in the text is enclosed an html comment mark\n&lt;!-- This is a comment  --&gt;\nSelect some text and type  to make it a comment.\nIn the source editor, you can select text you want to hide and use this keyboard short-cut to comment it out.\n\n\n\n3.2.1 Source editor\nSometimes it is useful to be able to write in markdown directly, rather than using the visual editor, for example if you are writing a question for stackoverflow.com or an issue on github.com. You can see this mode by clicking on “Source” above the document\n\n\n\n\n\n\n\nFigure 3.1: The Source code and Visual editors\n\n\n\nParagraphs have a blank line between them. It is good practice to write one sentence per line. The extra line breaks will be removed when the document in knitted. If you want to force a line break, put two spaces or a backslash at the end of the line.\nFormatting is generated with some special characters. For example:\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n# Header 1\nHeader 1\n\n\n## Header 2\nHeader 2\n\n\n### Header 3\nHeader 3\n\n\n*italics* and **bold**\n\nitalics and bold\n\n\n\nsuperscript m^2^\nsuperscript m2\n\n\n\nsubscript CO~2~\nsubscript CO2\n\n\n\n`verbatim code`\nverbatim code\n\n\n\n\n\n\n\n\n\nEscaping characters\n\n\n\nIf you actually want a *_^~ in the text, you need to escape it by putting a backslash \\ before it, e.g. \\*.\n\n\nA more complete list of formatting is given in the R markdown cheat sheet, and in the quarto documentation.\n\n\n\n\n\n\nVil du skrive på norsk\n\n\n\nVil du har Dato i stedet for Date, og Figur frem for Figure?\nUse the lang tag with nn for nynorsk or nb for bokmål. Other languages are available.\n---\ntitle: \"My Manuscript\"\nlang: nn\n---\nYou can change the spell checker language for the current project from the RStudio menu with\n\n\nTools\n\n\nProject options…\n\n\nSpelling\n\n\nYou can also change the global options to change the language for all projects.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nThe Results section of the svalbard_traits document should be in Header 1 style, and species names should be in italics. Fix this and render the document to check the formatting has worked.",
    "crumbs": [
      "First Steps with Quarto",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Elements of an quarto file</span>"
    ]
  },
  {
    "objectID": "03-elements-quarto-document.html#code-blocks",
    "href": "03-elements-quarto-document.html#code-blocks",
    "title": "3  Elements of an quarto file",
    "section": "\n3.3 Code blocks",
    "text": "3.3 Code blocks\nCode in an quarto document is contained in code blocks.\nThis is a code block that loads the tidyverse package.\n\n```{r}\nlibrary(tidyverse)\n```\n\nIt starts with three back-ticks, followed by braces. Inside the braces, the “r” indicates that this block is in the R language. Next, on a new line, is the body of the code block. The block ends with three back-ticks on their own line.\nIn the visual editor, you won’t see the back-ticks, but the code block will start with {r} and have a grey background.\n\n\n\n\n\n\n\nFigure 3.2: A code block in the visual editor\n\n\n\n\n\n3.3.1 Making a block\nYou can type the back-ticks and braces needed to make a block, but, when using the visual editor, it is easier to get RStudio to insert the block with the insert tool.\nType a forwards slash // on a blank line and choose “R code chunk”. You can also use the keyboard short-cut .\n\n3.3.2 Block language\nWe will just work with R code blocks, but it is possible to run block in other languages, including Python and Julia, which would have {python} and {julia} instead of {r} at the start of the chunk.\n\n3.3.3 Running a code block\nCode in blocks will be run when the document is rendered (unless eval: false), but it is also useful to run the code interactively to check that it works. You can do this by clicking on the green play buttons at the top-right of the block (Figure 3.3) or from the Run button above the document. If the code depends on previous block, the grey/green icon will run them all.\n\n\n\n\n\n\n\nFigure 3.3: The green run block icon and the grey/green icon to run all previous code blocks\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nRun all the blocks in the document.\nNow double click on the object called bistorta in the RStudio Environment tab so you can view it. These are the data we are working with.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nMake a new code block (or blocks) that make a plot showing the effect of the treatment on Bistorta leaf thickness.\n\nHint\nYou can copy and modify some of the existing code rather than writing from scratch. You will need to look at the data. Make sure all your chunk labels are unique.\n\n\n\n\n3.3.4 Block options\nCode block options control how the blocks work and how any output is treated. Options are given in special comments at the top of the block.\n\n```{r}\n#| label: load-data\n#| message: false\n\n# load data\ntraits &lt;- read_delim(\"data/PFTC4_Svalbard_2018_ITEX_Traits.csv\")\n```\n\n\n\n\n\n\n\nOptions format\n\n\n\nThe white space in the block options is critical.\n\nIf you don’t have the space after the #| then the option becomes a regular comment and is ignored.\nIf you don’t have a space after the colon, you get “ERROR: Render failed due to invalid YAML.”\n\ntrue and false are written in lower case (in R they are upper case).\nThe block options must start on the first line of the block after the {r}.\n\n\nThere are lots of block options, but only a few that you will need to use frequently. Here are some and their default.\n\n\necho (true) Show the block’s code in the output.\n\neval (true) Run the block’s code.\n\ninclude (true) Include the output of the block in the document.\n\nmessage (true) Include messages from R.\n\nwarning (true) Include warnings from R.\n\noutput (true) How and whether to include results.\n\nerror (false) If true, includes any error message and carries on. If false, stops knitting when there is an error in R code.\n\nI leave message and warning as true while I am writing the document, so I can see any possible problems, and set them to false when I render the final version.\nI sometimes find it useful to set error to true as can make it easier to debug any errors in the code.\nSome of these block options interact. Use the following widget, which initially shows the defaults, to explore what is shown with the most commonly used options.\n\nInteractive table: Select your block options\n\n\n\n\n\n\n\neval\n\n\n\n\n\n\n\ninclude\n\n\n\n\n\n\n\n\n\n\n\n\n\n\necho\n\n\n\n\n\n\n\nmessage\n\n\n\n\n\n\n\nwarning\n\n\n\n\n\n\n\noutput\n\n\n\n\n\n\n\nBlock output\n\n\n\n\n\n\n\n\n\n\nBlock options for figures are shown in Section 4.1.1.\nFor more options see https://quarto.org/docs/computations/execution-options.html\n\n\n\n\n\n\nExercise\n\n\n\nImporting packages produces lots of output that we don’t need to see in the final report. Use block options to hide the output of this block.\nThe code block importing the data is giving a message how the data were imported. Use block options to make this message go away.\n\n\n\n3.3.5 Setting global block options\nGlobal code block options can be set for all code blocks by including execute with the option in the YAML at the top of the file.\nFor example, this YAML would set echo to be false for the entire document (options for individual blocks could override this).\n---\ntitle: \"My Manuscript\"\nformat: html\nexecute:\n  echo: false\n---\n\n\n\n\n\n\nExercise\n\n\n\nUse global block options to stop the code from showing in the report.\n\n\n\n3.3.6 Block labels\nIt is a good idea to give code blocks labels which you can do with the label option. If you don’t, they will automatically be called “unnamed-chunk-n” where “n” is a incrementing number. This is inconvenient for debugging (you need to work out which block is “unnamed-chunk-38”) and for working with any image files generated by the document. In section Chapter 6 you will see how to use block names to cross-reference figures and tables in your document.\n\n3.3.6.1 Rules for block labels\nBlock labels should be informative and can contain letters and numbers. Words should be separated by hyphens (“-”).\n\n\n\n\n\n\nSpecial characters in labels\n\n\n\nAvoid spaces, underscores, periods and other special characters in code block labels. They will cause all sorts of strange problems.\n\n\n\n3.3.7 Hiding a block\nIf a block has a lot of code, it can be useful to hide it to make it easier to navigate the document. It will still be rendered. The grey arrow next to the line numbers will do this. Sections of text can also be hidden.\n\n3.3.8 Environments and working directory\nR renders quarto documents in a new R session. Initially, no packages are loaded and the environment is empty: the quarto document does not have access to any objects in your current environment (this is a good thing for reproducible analyses). This means that any data or packages you want to use in the document needs to be imported by the code in the document.\nThe working directory for the new R session used when rendering the quarto file is the directory where the quarto file is. If the file is in the root directory of an RStudio project, relative paths will work the same way in the quarto document as from the console. If the quarto file is in a sub-directory, use here::here() to form paths relative to the project root.",
    "crumbs": [
      "First Steps with Quarto",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Elements of an quarto file</span>"
    ]
  },
  {
    "objectID": "03-elements-quarto-document.html#inline-code",
    "href": "03-elements-quarto-document.html#inline-code",
    "title": "3  Elements of an quarto file",
    "section": "\n3.4 Inline code",
    "text": "3.4 Inline code\nIn addition to the output from code blocks, you can insert code directly into text. This lets you avoid copying and pasting numbers from the output. Inline code is enclosed by back-ticks and starts with an r.\nSeven times six is `r 7 * 6`\n\nSeven times six is 42\n\nIn the visual editor, you can make inline code by clicking on the &lt;/&gt; icon.\n\n\n\n\n\n\nNumbers in words\n\n\n\nIf you want numbers written as words, for example at the start of a sentence, use the package english.\n`r english::Words(7 * 6)` is the answer to seven times six.\n\nForty-two is the answer to seven times six.\n\n\n\nIt is best to keep inline code short to keep the text readable.\n\n\n\n\n\n\nMaking a list to shorten inline code\n\n\n\nOne trick to shorten inline code is to do all necessary calculations in a previous code block, so only the name of the object with the result needs to be in the inline code. If there are many results to report, consider storing them in a list as in the following example.\n\n# filter out height data\ntrait_height &lt;- traits |&gt;\n  filter(Trait == \"Plant_Height_cm\") |&gt;\n  drop_na(Treatment)\n\n# make list summarising height data\nheight_info &lt;- list(\n  n = nrow(trait_height),\n  min = min(trait_height$Value),\n  max = max(trait_height$Value)\n)\n\nWe measured `r height_info$n` plants.\nThe minimum height was `r height_info$min` cm and the maximum `r height_info$max` cm.\n\nWe measured 422 plants. The minimum height was 0.1 cm and the maximum 30 cm.\n\n\n\n\n\n\n\n\n\nglue chunks inline code.\n\n\n\nYou can also use a glue chunk with the glue package. This might be useful when there is a lot of inline R, or if you want to test it before you render the document.\nFirst we need to load the glue package\n\nlibrary(glue)\n\nThen we can use a glue chunk with the chunk option output: asis to format the output as raw markdown. R code is put inside braces {}.\n```{glue}\n#| label: glue-example\n#| output: asis\nWe measured {height_info$n} plants. The minimum height was {height_info$min} cm and the maximum {height_info$max} cm.\n```\n\n\nWe measured 422 plants. The minimum height was 0.1 cm and the maximum 30 cm.\n\n\nOnly one line of text per glue chunk.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nUse some inline R code to report the number of leaf thickness measurements for Bistorta vivipara.\n\n\n\n\n\n\n\n\nRounding numbers\n\n\n\nNumbers should be rounded to an appropriate number of decimal places when reported in the text or a table to avoid spurious precision.\nHere are some functions that can help\n\n# use round() to round number to the required number of digits after the decimal point.\nround(151.98646, digits = 2)\n\n[1] 151.99\n\nround(151.98646, digits = -1) # negative values round to the left of the decimal point.\n\n[1] 150\n\n# Use signif() to set the required number of significant figures\nsignif(c(0.15198646, 151.98646), digits = 4)\n\n[1]   0.152 152.000\n\n# format.pval() is a special function for formatting p-values.\n# Use the eps argument to set the minimum exact values to display.\nformat.pval(c(0.194342, 0.00000194342), digits = 3, eps = 0.001)\n\n[1] \"0.194\"  \"&lt;0.001\"\n\n# format() when you need more control over how the number is displayed\n# Norwegian format\nformat(1504703.232, big.mark = \".\", decimal.mark = \",\", nsmall = 1)\n\n[1] \"1.504.703,2\"\n\n\nMake sure to do all calculations, analyses and figures on the full precision number and only round to display it as text.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nThe mean Bistorta vivipara height is currently given to the nearest nanometre. This precision is spurious. Edit the inline code in the document so that the mean height and its standard error are shown to two decimal places.",
    "crumbs": [
      "First Steps with Quarto",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Elements of an quarto file</span>"
    ]
  },
  {
    "objectID": "04-figures-tables.html",
    "href": "04-figures-tables.html",
    "title": "\n4  Figures, tables and equations\n",
    "section": "",
    "text": "4.1 Figures made in R\nPlots can be included with a chunk that makes a figure with either base plot or ggplot.\nIf you make the plot with ggplot, remember to print it.\n```{r}\n#| label: fig-histogram\n#| fig-cap: \"An embedded figure\"\n#| fig-alt: \"A histogram of plant heights made with ggplot2\"\n#| message: false\n#| warning: false\np &lt;- ggplot(trait_height, aes(x = Value)) +\n  geom_histogram(boundary = 0) +\n  labs(x = \"Height cm\")\np # remember to print the plot\n```\n\n\n\n\n\n\nFigure 4.1: An embedded figure",
    "crumbs": [
      "First Steps with Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Figures, tables and equations</span>"
    ]
  },
  {
    "objectID": "04-figures-tables.html#figures-made-in-r",
    "href": "04-figures-tables.html#figures-made-in-r",
    "title": "\n4  Figures, tables and equations\n",
    "section": "",
    "text": "Figure labels\n\n\n\nThe label for the figure block must start with fig- for the figure to get a figure number and be possible to link to. See Chapter 6 on cross-referencing.\n\n\n\n4.1.1 Figure code block options\nThere are several useful block options for figures, including:\n\n\nfig-cap figure caption.\n\nfig-alt alternate text to improve accessibility\n\nfig-height figure height in inches (1 inch = 25.4 mm)\n\nfig-width figure width in inches\n\n\n\n\n\n\n\n\nExercise\n\n\n\nThe figure of height against treatment is missing a caption. Use code block options to give it an appropriate caption and alt-text.\nMany journals require figures to be a specific size so they fit with the journal layout. For PLOSone, figures that fit in one column can be up to 13.2 cm (5.2 inches) wide. Use code block options to ensure that the figure would fit.\n\n\n\n\n\n\n\n\nR code in chunk options\n\n\n\nSometimes it is useful to have R code in the chunk options.\nWe can do this by putting !expr before the R code. For example, this chunk makes the figure caption include how many species there are in the dataset. It could be written with paste() but I prefer glue::glue() syntax - the code in the braces {} is evaluated and included in the sentence.\n\n```{r}\n#| label: fig-r-in-chunk-options\n#| fig-cap: !expr glue::glue(\"Heights of the {nrow(trait_height)} plants measured\")\n#| fig-alt: \"A density plot of plant heights made with ggplot2\"\n#| message: false\n#| warning: false\n\np &lt;- ggplot(trait_height, aes(x = Value, fill = Treatment)) +\n  geom_density(bounds = c(0, Inf), alpha = 0.5) +\n  labs(x = \"Plant height cm\", y = \"Density\")\np\n```\n\n\n\n\n\n\nFigure 4.2: Heights of the 422 plants measured\n\n\n\n\n\n\n\n\n\n\n\n\nSetting default ggplot themes\n\n\n\nWhen you make a ggplot figure, you can specify the theme you want to use. For example, to use theme_classic(), we could change the previous figure’s code to\n\np &lt;- ggplot(trait_height, aes(x = Value, fill = Treatment)) +\n  geom_density(bounds = c(0, Inf), alpha = 0.5) +\n  labs(x = \"Plant height cm\", y = \"Density\") +\n  theme_classic()\np\n\nTo give all the figures in a document a consistent theme, you can set the default theme near the start of the document, perhaps in the code block where the package are loaded, with theme_set().\n\nlibrary(tidyverse)\ntheme_set(theme_classic())\n\nYou can also set the default font size with the base_size argument to theme_classic(). Now we don’t need to add theme_classic() to every figure. You can learn more about themes here.",
    "crumbs": [
      "First Steps with Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Figures, tables and equations</span>"
    ]
  },
  {
    "objectID": "04-figures-tables.html#embedding-external-images",
    "href": "04-figures-tables.html#embedding-external-images",
    "title": "\n4  Figures, tables and equations\n",
    "section": "\n4.2 Embedding external images",
    "text": "4.2 Embedding external images\nIn the visual editor, photographs and other figures that have been prepared outside of R can be included with the insert tool by typing “/” on a blank line and choosing “Figure/Image”. This will open an menu to get the path to the image and set the caption etc. Once you close the menu, you can set the figure size. This will generate a bit of markdown that looks like.\n![Marine diatoms](Pics/Marine_diatoms_SEM2.jpg){fig-alt=\"SEM photograph of marine diatoms\" width=\"491\"}\n\n\nMarine diatoms\n\nAlternatively, you can use knitr::include_graphics() in a regular code block.\n\n```{r}\n#| label: fig-include-figure\n#| out-width: \"491px\"\n#| fig-cap: \"An embedded figure of diatoms\"\n#| fig-alt: \"An embedded figure of diatoms\"\nknitr::include_graphics(\"Pics/Marine_diatoms_SEM2.jpg\")\n```\n\n\n\n\n\n\nFigure 4.3: An embedded figure of diatoms\n\n\n\n\nUse the out-width and out-height chunk options to set the display size of the figure.",
    "crumbs": [
      "First Steps with Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Figures, tables and equations</span>"
    ]
  },
  {
    "objectID": "04-figures-tables.html#tables",
    "href": "04-figures-tables.html#tables",
    "title": "\n4  Figures, tables and equations\n",
    "section": "\n4.3 Tables",
    "text": "4.3 Tables\nYou can make tables in markdown by hand (the // insert tool helps a lot), but it often so much easier to use R.\nSimple tables can be made with the function knitr::kable. Several packages, including kableExtra and gt can make beautiful tables.\nThe block label need to start with tbl- if the main caption and table number are to be shown.\n\n4.3.1 gt\nThe gt package can make more elaborate tables than knitr::kable().\n\n```{r}\n#| label: tbl-gt\n#| tbl-cap: Tables with `gt()`\n\nlibrary(gt)\n\n# summarise data\ntrait_height_summary &lt;- trait_height |&gt; \n  group_by(Taxon) |&gt; \n  # calculate mean, sd and number observations for each taxon\n  summarise(mean = mean(Value), sd = sd(Value), n = n()) |&gt; \n  # filter species with at least ten observations\n  filter(n &gt;= 10) \n\ntrait_height_summary |&gt;\n  gt() |&gt; # just gt() is enought to make a table\n  # improve column names\n  cols_label(\n    mean = \"Mean\", # Display column headers\n    sd = \"Standard deviation\",\n    n = \"Number\"\n  ) |&gt;\n  # format some columns as numbers - defaults to two decimal places\n  fmt_number(columns = c(mean, sd)) |&gt; \n  # adds a spanner above some columns\n  tab_spanner(label = \"Height\", columns = c(mean, sd))\n```\n\n\nTable 4.1: Tables with gt()\n\n\n\n\n\n\n\nTaxon\nHeight\nNumber\n\n\nMean\nStandard deviation\n\n\n\n\nbistorta vivipara\n3.75\n1.81\n77\n\n\ncarex rupestris\n3.71\n1.34\n22\n\n\ncassiope tetragona\n8.09\n2.45\n16\n\n\ndryas octopetala\n2.76\n1.54\n45\n\n\nequisetum arvense\n4.07\n4.71\n38\n\n\nequisetum scirpoides\n1.79\n1.45\n60\n\n\nfestuca rubra\n7.04\n2.09\n19\n\n\npoa arctica\n7.87\n2.33\n34\n\n\nsalix polaris\n2.04\n1.10\n72\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNumber of decimal places\n\n\n\nWhen reporting real numbers (i.e. numbers that have a decimal part), you need to decide how many digits to display. Be careful not to show spurious precision. You can use round() to remove unwanted decimals, or gt::fmt_number() to clean up one or more columns in a table.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nWrite a code block to make a table showing the mean leaf thickness and its standard deviation for each treatment.\nHint\nsd() for standard deviation\ngroup_by() and summarise() then use any of the table making functions.",
    "crumbs": [
      "First Steps with Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Figures, tables and equations</span>"
    ]
  },
  {
    "objectID": "04-figures-tables.html#equations",
    "href": "04-figures-tables.html#equations",
    "title": "\n4  Figures, tables and equations\n",
    "section": "\n4.4 Equations",
    "text": "4.4 Equations\nEquations are embedded in a pair of dollar symbols. RStudio will show a preview of the equation as you type it. Equations are written with LaTeX notation.\n\n\n\n\nWhat\nHow\nOutput\n\n\n\nLower-case Greek letters\n$\\sigma$\n\\(\\sigma\\)\n\n\nUpper-Case Greek Letters\n$\\Sigma$\n\\(\\Sigma\\)\n\n\nSubscript\n$\\beta_{0}$\n\\(\\beta_{0}\\)\n\n\nSuperscript\n$\\chi^{2}$\n\\(\\chi^{2}\\)\n\n\nFractions\n$\\frac{1}{2}$\n\\(\\frac{1}{2}\\)\n\n\nRoots\n$\\sqrt{4} = 2$\n\\(\\sqrt{4} = 2\\)\n\n\n\n\n\n\nHere is an example of using an inline equation.\nThe $\\delta^{13}C$ value ...\n\nThe \\(\\delta^{13}C\\) value …\n\nA double dollar enclosure gives the equation its own line. For example, this is the equation of a standard deviation that uses several different elements.\n$$\nSD = \\sqrt{\\frac{\\sum_{i=1}^{n}{(x_i - \\bar{x})^2}}{n-1}}\n$$\n\\[\nSD = \\sqrt{\\frac{\\sum_{i=1}^{n}{(x_i - \\bar{x})^2}}{n-1}}\n\\]\nWhen making a complex formula, build one element at a time, often starting in the middle, rather than trying to get it all working at once.",
    "crumbs": [
      "First Steps with Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Figures, tables and equations</span>"
    ]
  },
  {
    "objectID": "04-figures-tables.html#chemistry",
    "href": "04-figures-tables.html#chemistry",
    "title": "\n4  Figures, tables and equations\n",
    "section": "\n4.5 Chemistry",
    "text": "4.5 Chemistry\nEquations are printed in an italic font, which is not great for chemical formulae. We can fix this with the \\mathrm LaTeX command which forces roman typeface.\nSulphate $\\mathrm{SO_4^{2-}}$\n\nSulphate \\(\\mathrm{SO_4^{2-}}\\)\n\n$$\\mathrm{CO_3^{2-} + H^+ \\rightleftharpoons HCO_3^{2-}}$$\n\\[\\mathrm{CO_3^{2-} + H^+ \\rightleftharpoons HCO_3^{2-}}\\]",
    "crumbs": [
      "First Steps with Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Figures, tables and equations</span>"
    ]
  },
  {
    "objectID": "05-bibliography-citations.html",
    "href": "05-bibliography-citations.html",
    "title": "5  Citations and bibliographies",
    "section": "",
    "text": "5.1 Citations\nQuarto can add citations and a bibliography to a document. Use the bibliography field in the YAML to point to the bibliography file.\nThe bibliography file can be in one of several formats, including bibTeX (*.bib). Any reference manager should be able to export to a bibTeX file. If you use zotero as your reference manager, RStudio can connect to it directly.\nUse the citation keys from the bibliography to cite the reference in the text. So to cite the reference with the citation key “Cooper2017” we would use.\nThe output depends on the csl file (see below). Using the default author-date style gives\nIn the visual editor, type @ to get suggestions from the bibliography. This is not so useful if you have many references. Alternatively, summon the import anything tool by typing\n and opening the citation menu, which lets you search for references in the bibliography or add new ones.",
    "crumbs": [
      "Towards a Thesis",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Citations and bibliographies</span>"
    ]
  },
  {
    "objectID": "05-bibliography-citations.html#citations",
    "href": "05-bibliography-citations.html#citations",
    "title": "5  Citations and bibliographies",
    "section": "",
    "text": "Reproducible code [@Cooper2017] ...\n@Cooper2017 discuss ...\n\n\nReproducible code (Cooper and Hsing 2017) …\nCooper and Hsing (2017) discuss …\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nAdd a citation to Töpper et al (2018) to the introduction to your quarto document as an example of climate change impacts on terrestrial ecosystems.",
    "crumbs": [
      "Towards a Thesis",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Citations and bibliographies</span>"
    ]
  },
  {
    "objectID": "05-bibliography-citations.html#citation-style",
    "href": "05-bibliography-citations.html#citation-style",
    "title": "5  Citations and bibliographies",
    "section": "5.2 Citation style",
    "text": "5.2 Citation style\nIf you don’t like the default citation style, or you want to submit a manuscript to a journal with an overly pedantic editor, you can change the citation style by specifying a csl file in the YAML.\n---\ntitle: \"My Manuscript\"\noutput: html_document\nbibliography: reproducibility.bib\ncsl: plos.csl\n---\nThe csl (Citation Style Language) file defines the citation style. There are thousands of citation style available from http://zotero.org/styles (there are specific formats for publishers and many journals).\n\n\n\n\n\n\nExercise\n\n\n\nChange the csl file from nordic-journal-of-botany.csl to plos.cls. Render the document to see how the citations change in the text and in the bibliography.",
    "crumbs": [
      "Towards a Thesis",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Citations and bibliographies</span>"
    ]
  },
  {
    "objectID": "05-bibliography-citations.html#citation-problems",
    "href": "05-bibliography-citations.html#citation-problems",
    "title": "5  Citations and bibliographies",
    "section": "5.3 Citation problems",
    "text": "5.3 Citation problems\nUnfortunately, there can be problems with the bibliography and citation. Most can be solved by googling the error message. A few common problems are addressed here.\n\n5.3.1 Incorrect capitalisation\nMany CLS styles convert the title to title case (i.e. only first letter of the first word is capitalised). This can be annoying as names (people, countries, species) can be given in the wrong case.\nA paper with the title\nPopulation ecology of polar bears at Svalbard, Norway.\nmay appear as\nPopulation ecology of polar bears at svalbard, norway.\nThis can be fixed by editing the bibtex file, putting braces around the word with capitals that need to be kept.\nPopulation ecology of polar bears at {Svalbard}, {Norway}.\n\n\n5.3.2 Accents and other special characters\nThe tool-chain that processes quarto files can sometimes fall over with accented characters or other diacritic marks in the references. The error message will look something like this\n! Package inputenc Error: Unicode character ́ (U+0301)\n(inputenc)                not set up for use with LaTeX.\nOne solution is to edit the bibtex file to replace the accented character with an escaped code. For example, the “í” in “Martínez” could be replaced by “\\’{i}”.",
    "crumbs": [
      "Towards a Thesis",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Citations and bibliographies</span>"
    ]
  },
  {
    "objectID": "05-bibliography-citations.html#bibliography-placement",
    "href": "05-bibliography-citations.html#bibliography-placement",
    "title": "5  Citations and bibliographies",
    "section": "5.4 Bibliography placement",
    "text": "5.4 Bibliography placement\nBy default, the bibliography is placed at the end of the document. It will be given the header “References”. If you want a different header, end the document with it.\n# Conclusions\n\nQuarto is cool.\n\n# Bibliography {-}\nThe {-} stops quarto from numbering the reference section header.\nIf you want to move the bibliography, for example because you need to finish with an appendix, you need to use this bit of magic.\n# Conclusions\n\nQuarto is very cool.\n\n# References {-}\n\n::: {#refs}\n:::\n\n# Appendix A",
    "crumbs": [
      "Towards a Thesis",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Citations and bibliographies</span>"
    ]
  },
  {
    "objectID": "06-cross-reference.html",
    "href": "06-cross-reference.html",
    "title": "6  Cross-referencing",
    "section": "",
    "text": "6.1 Cross-referencing figures and tables\nCross-referencing lets you refer to figures and tables in your document. Once set up, this happens automatically, so you don’t need to re-number all the figures when you add or delete one.\nThe block that made the figure or table needs to have a label that starts with fig- or tbl-, respectively. The figure or table also need a caption.\n```{r}\n#| label: fig-height-violin\n#| fig-cap: Violin plot of plant heights\n#| fig-alt: Violin plot of plant heights made with ggplot2\n#| warning: false\n\ntrait_height |&gt;\n  ggplot(aes(x = Treatment, y = Value)) +\n  geom_violin(fill = \"grey\") +\n  labs(y = \"Plant Height cm\")\n```\n\n\n\n\n\n\nFigure 6.1: Violin plot of plant heights\nTo cross-reference the figure made by the above chunk, we need to use this notation.\nIf you type an @@ in the visual editor it will make suggestion. If, in the visual editor, it does not show up in a smaller blue font, something has gone wrong. Delete it and make sure there is a space before the @@.\nTo refer to a table made by a block labelled tbl-traits-results, you would use\nIf you get the chunk name wrong, there will be a warning when the document in knitted, and question marks shown where the reference should be.",
    "crumbs": [
      "Towards a Thesis",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Cross-referencing</span>"
    ]
  },
  {
    "objectID": "06-cross-reference.html#cross-referencing-figures-and-tables",
    "href": "06-cross-reference.html#cross-referencing-figures-and-tables",
    "title": "6  Cross-referencing",
    "section": "",
    "text": "Plant traits are cool (@fig-height-violin)\n\nPlant traits are cool (Figure 6.1)\n\n\n\nPlant traits are cool (@tbl-traits-results))\n\nNon-existing (@fig-no-exist)\n\nNon-existing (?fig-no-exist)",
    "crumbs": [
      "Towards a Thesis",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Cross-referencing</span>"
    ]
  },
  {
    "objectID": "06-cross-reference.html#cross-referencing-equations",
    "href": "06-cross-reference.html#cross-referencing-equations",
    "title": "6  Cross-referencing",
    "section": "\n6.2 Cross-referencing equations",
    "text": "6.2 Cross-referencing equations\nTo cross-reference an equation, we need to give it a label.\n$$\n\\frac{\\sum_{i=1}^{n}{x_i}}{n}\n$${#eq-mean}\nNow the label can be used.\nThe mean (@eq-mean).\n\\[\n\\frac{\\sum_{i=1}^{n}{x_i}}{n}\n\\tag{6.1}\\]\n\nThe mean (Equation 6.1).",
    "crumbs": [
      "Towards a Thesis",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Cross-referencing</span>"
    ]
  },
  {
    "objectID": "06-cross-reference.html#sec-cross-referencing-document-sections",
    "href": "06-cross-reference.html#sec-cross-referencing-document-sections",
    "title": "6  Cross-referencing",
    "section": "\n6.3 Cross-referencing document sections",
    "text": "6.3 Cross-referencing document sections\nYou can also make cross-references to other sections of the document. First, you need to set up a identifier for the section you want to link to. In the visual editor, this can be done by clicking on the three dots to the right of the header (Figure 6.2) . The ID should start with #sec- and be in lower case (Figure 6.3). Now you can use this ID to make a link by typing @@.\n\n\n\n\n\n\n\nFigure 6.2: Click on the three dots to get the Edit Attributes menu\n\n\n\n\n\n\n\n\n\n\n\nFigure 6.3: The Edit Attributes menu\n\n\n\n\nIn the source editor, it will look like this.\n## Cross-referencing document sections {#sec-cross-referencing-document-sections}\n\nCross-referencing (@sec-cross-referencing-document-sections)\n\nCross-referencing (Section 6.3)\n\nNote that the reference must be written in lower case and spaces must be replaced by hyphens. Punctuation is deleted.",
    "crumbs": [
      "Towards a Thesis",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Cross-referencing</span>"
    ]
  },
  {
    "objectID": "07-journal-formatting.html",
    "href": "07-journal-formatting.html",
    "title": "7  Formatting for a thesis or article",
    "section": "",
    "text": "7.1 Formatting for a thesis\nWe have made a quarto Masters thesis template that you can download and use. It takes care of formatting the thesis’ cover page which otherwise would need you to know some LaTeX.",
    "crumbs": [
      "Towards a Thesis",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Formatting for a thesis or article</span>"
    ]
  },
  {
    "objectID": "07-journal-formatting.html#journal-specific-formatting",
    "href": "07-journal-formatting.html#journal-specific-formatting",
    "title": "7  Formatting for a thesis or article",
    "section": "7.2 Journal-specific formatting",
    "text": "7.2 Journal-specific formatting\nManuscript templates have been developed for some publisher’s journals. To use a template, run this code in the RStudio Terminal (Not the console), changing the publisher name as necessary for one on this list of the available templates, and follow the instructions.\nquarto use template quarto-journals/plos\nThis will download the journal template and make a qmd file with the YAML set up. Edit this file so it becomes your manuscript. Render as usual to produce the PDF and the tex file that you might need for submission. You can read more about journal formats in the Quarto guide.",
    "crumbs": [
      "Towards a Thesis",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Formatting for a thesis or article</span>"
    ]
  },
  {
    "objectID": "07-journal-formatting.html#line-numbers",
    "href": "07-journal-formatting.html#line-numbers",
    "title": "7  Formatting for a thesis or article",
    "section": "7.3 Line numbers",
    "text": "7.3 Line numbers\nIf you are creating a PDF, you can include line numbers by adding a header-includes section to the YAML.\n---\ntitle: \"My Manuscript\"\nformat: pdf\nheader-includes:\n   - \\usepackage{lineno}\n   - \\linenumbers\n---\nOther LaTeX packages can be added in a similar way to add extra functionality, for example, pages in landscape.",
    "crumbs": [
      "Towards a Thesis",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Formatting for a thesis or article</span>"
    ]
  },
  {
    "objectID": "08-quarto-presentations.html",
    "href": "08-quarto-presentations.html",
    "title": "\n8  Presentations in quarto\n",
    "section": "",
    "text": "Once you have a reproducible manuscript or thesis with quarto, you will need a presentation. Why not make a reproducible presentation. You can also do this with quarto. From the RStudio menu, go to\n\n\nFile\n\n\nNew File\n\n\nQuarto Presentation…\n\n\nChoose a Reveal JS presentation and click Create.\n\n\n\n\n\n\n\nFigure 8.1: Creating a new quarto presentation\n\n\n\n\nThis will open a new presentation with some place-holder text. Press Render to see the rendered presentation.\nEverything about text, code blocks, tables and figures you know from quarto still applies to quarto presentations. The most important thing to learn is how to make new slides.\n---\ntitle: \"My beautiful presentation\"\nauthor: Richard Telford\nformat: revealjs\neditor: visual\n---\n\n## This is a new slide\n\nlevel 2 headers make new slides\n\n# This is a new section\n\n## Another new slide\n\nLevel 1 headers make new sections\n\n---\nThis slide does not start with a title\n\n- bullet point 1\n- bullet point 2\n\n\n\n\nThis demo shows what you can do with a Revealjs presentation made with quarto.\n\n\n\n\n\n\nReading\n\n\n\nRevealjs with quarto",
    "crumbs": [
      "Towards a Thesis",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Presentations in quarto</span>"
    ]
  },
  {
    "objectID": "09-other-topics.html",
    "href": "09-other-topics.html",
    "title": "9  Other topics",
    "section": "",
    "text": "9.1 Too much or too slow code\nIf code runs slowly, the output of code blocks can be cached, so next time the document is rendered the existing cached results can be used, unless the code has been changed. The caching system in quarto can be activated by setting the code block option cache = TRUE. The caching system can be tricky to set up for complex projects, and the targets package is a much more robust framework for building reproducible analysis pipelines. See this demonstration project for an example of how to set up targets.\nIf there is simply too much code, you can move code into another file. There are two ways to do this. The first is with includes. These effectively copy and paste text and code from another quarto file. To include the file “_load-data.qmd”, which has a code block for loading the data, we need this shortcode.\nThe shortcode needs to be on its own line, with space above and below. The file name should start with an underscore. Includes could also be useful for different sections of a manuscript\nThe second method is to use the file option in a code block. For example, to run the code from the file “load-data.R”, we could use the following code block.\nOr if we need to use here, we can use this one.",
    "crumbs": [
      "Fixing problems",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Other topics</span>"
    ]
  },
  {
    "objectID": "09-other-topics.html#too-much-or-too-slow-code",
    "href": "09-other-topics.html#too-much-or-too-slow-code",
    "title": "9  Other topics",
    "section": "",
    "text": "{{&lt; include _load-data.qmd &gt;}}\n\n\n```{r}\n#| label: load-data\n#| file: load-data.R\n```\n\n```{r}\n#| label: load-data\n#| file: !expr here::here(\"load-data.R\")\n```",
    "crumbs": [
      "Fixing problems",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Other topics</span>"
    ]
  },
  {
    "objectID": "09-other-topics.html#paramertised-reports",
    "href": "09-other-topics.html#paramertised-reports",
    "title": "9  Other topics",
    "section": "9.2 Paramertised reports",
    "text": "9.2 Paramertised reports\nIf you need a template for many reports, for example, showing results for a specific location or time period, consider using Paramertised reports which allow you to pass a variable into an quarto document when it is rendered.\nThis is done by declaring one or more parameters in the YAML. For example, to make a report about just one of the species in the penguins dataset, we might use this YAML, which sets the default value of species to Adelie.\n---\ntitle: \"Penguin Report\"\nparams:\n  species: Adelie\n---\nWe can now access this parameter with param$species. Perhaps in a chunk like this\nlibrary(tidyverse)\npalmerpenguins::penguins |&gt; \n  filter(species == params$species) |&gt; \n  summarise(mean_bill_length = mean(bill_length_mm, na.rm = TRUE))\nIf we wanted to make the report for a different species, we would have to run quarto_render in the console.\nquarto::render(\n    input = \"penguin_report.qmd\", \n    execute_params = list(species = \"Gentoo\")\n  )",
    "crumbs": [
      "Fixing problems",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Other topics</span>"
    ]
  },
  {
    "objectID": "10-troubleshooting.html",
    "href": "10-troubleshooting.html",
    "title": "10  Troubleshooting",
    "section": "",
    "text": "10.1 Common issues\nIt is normal to have errors when working with R and quarto. Problems can be minimised by developing the document and code incrementally and rendering it repeatedly so that errors can be detected immediately.",
    "crumbs": [
      "Fixing problems",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  },
  {
    "objectID": "10-troubleshooting.html#common-issues",
    "href": "10-troubleshooting.html#common-issues",
    "title": "10  Troubleshooting",
    "section": "",
    "text": "10.1.1 Duplicate block labels\nCode block labels must be unique. If they are not you will get an error message including the following\n  Duplicate chunk label 'import', which has been used for the chunk:\nIdentify the offending code block and re-label it.\n\n\n10.1.2 More errors to come\nTell me what you find difficult.",
    "crumbs": [
      "Fixing problems",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  },
  {
    "objectID": "10-troubleshooting.html#solving-problems",
    "href": "10-troubleshooting.html#solving-problems",
    "title": "10  Troubleshooting",
    "section": "10.2 Solving problems",
    "text": "10.2 Solving problems\n\n10.2.1 Interpret error messages\nIf you get an error message, read it and try to understand it. Copy it and paste into Google (or similar), someone has probably had the same problem before and there may be a solution at stackoverflow.com or elsewhere.\n\n\n10.2.2 Make a minimal, reproducible example\nA minimal, reproducible example or (reprex) is the smallest amount of code etc needed to reproduce a problem. The ability to make a one is a superpower for locating and solving problems.\nThere are two basic approaches:\n\nrestart from scratch, make a new document that contains only what is needed to reproduce the problem. This is useful when you know where the problem is.\ndivide and conquer, make a copy of your document (perhaps the whole project) and delete it bit by bit until the problem disappears, when add the last bit again.\n\nWith a reprex it is easier and faster to understand and perhaps fix the problem, and is needed to ask a question on stackoverflow.com or elsewhere.",
    "crumbs": [
      "Fixing problems",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  },
  {
    "objectID": "11-further-reading.html",
    "href": "11-further-reading.html",
    "title": "11  Further reading",
    "section": "",
    "text": "Quarto guide\nMany of the R Markdown guides are also useful.\n\nR markdown cheat sheet\nR markdown from RStudio\nR Markdown: The Definitive Guide",
    "crumbs": [
      "Fixing problems",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Further reading</span>"
    ]
  }
]