[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Writing an R package",
    "section": "",
    "text": "1 Introduction\nThis tutorial will show you how to write your own R package.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#why-write-your-own-package",
    "href": "index.html#why-write-your-own-package",
    "title": "Writing an R package",
    "section": "1.1 Why write your own package",
    "text": "1.1 Why write your own package\n\nPublish code that implements novel statistical method\nCode to import data from, for example, a logger\nWrap up various functions that you want to reuse",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "01-system-setup.html",
    "href": "01-system-setup.html",
    "title": "\n2  System setup\n",
    "section": "",
    "text": "You should use the latest version of R (currently 4.4.0) and a recent version of RStudio. It is a good idea to have git installed and have a GitHub (or similar) account (see git and GitHub book).\nYou will need to install the devtools package\n\ninstall.packages(\"devtools\")\n\nThis will also install the usethis, roxygen2 and testthat packages that we will use.\nIf you are using Windows, you may need to install Rtools if your package will contain C++ code or similar. You can download and install Rtools from https://cran.r-project.org/bin/windows/Rtools/ using the defaults. Rtools is not an R package.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>System setup</span>"
    ]
  },
  {
    "objectID": "02-package-infrastructure.html",
    "href": "02-package-infrastructure.html",
    "title": "\n3  Creating the package infrastructure\n",
    "section": "",
    "text": "3.1 DESCRIPTION file\nA package starts life as a directory with some files and subdirectories that R expects. There is nothing to stop you building the whole thing from scratch. But it is so much easier to get some help from usethis.\nThe create_package function takes the path of the project you want to write, creates this directory, add adds some files and subdirectories.\nThe name of the directory will become the name of the package. Choose carefully as it is easier to get it right now than change it later. There are special rules for naming packages\nTry to avoid name clashes with existing packages, especially those on CRAN. The function available::available() can tell you if your name is valid and if it clashes with an existing package.\nOnce you have chosen your name, you can create the skeleton of your package. You can either use usethis::create_package(path = \"path/to/package\") or the RStudio menu File -&gt; New Project -&gt; New Directory -&gt; R Package.\nWhen you run this, it will open a new RStudio session. The files tab should look something like this.\nAlmost everything concerned with setting up a package is easier with the usethis package. We are going to be using this package a lot, so you might want to load it now.\nThe DESCRIPTION file contains the information used by CRAN to make the package page there (see for example devtools).\nStart by editing the title, author and description fields of the DESCRIPTION files. The title field must be in title case (they really do check this when you submit to CRAN).\nWhen you have finished, be sure to save the file otherwise your changes will be over-written.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Creating the package infrastructure</span>"
    ]
  },
  {
    "objectID": "02-package-infrastructure.html#description-file",
    "href": "02-package-infrastructure.html#description-file",
    "title": "\n3  Creating the package infrastructure\n",
    "section": "",
    "text": "Package: DemoPackage\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R: \n    person(given = \"First\",\n           family = \"Last\",\n           role = c(\"aut\", \"cre\"),\n           email = \"first.last@example.com\",\n           comment = c(ORCID = \"YOUR-ORCID-ID\"))\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nLazyData: true\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.1.1",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Creating the package infrastructure</span>"
    ]
  },
  {
    "objectID": "02-package-infrastructure.html#choose-a-licence",
    "href": "02-package-infrastructure.html#choose-a-licence",
    "title": "\n3  Creating the package infrastructure\n",
    "section": "\n3.2 Choose a licence",
    "text": "3.2 Choose a licence\nYou need to set a licence for your package otherwise, legally, no-one will be allowed to make a copy and use it.\nFrequently used open source licences for R packages are\n\n\nMIT licence is a permissive licence, letting people do almost anything (including use, copy, modify, merge, publish, distribute, sublicense, or sell) with the software. Generate with usethis::use_mit_license()\n\n\nGPL licence lets people do almost anything except distributing closed source versions. Generate with usethis::use_gpl_license()\n\n\nI generally use the MIT licence. Data packages probably should use a CC0 licence.\nFor more information about licences, see the R package book and Choose a License",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Creating the package infrastructure</span>"
    ]
  },
  {
    "objectID": "02-package-infrastructure.html#git-and-github",
    "href": "02-package-infrastructure.html#git-and-github",
    "title": "\n3  Creating the package infrastructure\n",
    "section": "\n3.3 git and GitHub",
    "text": "3.3 git and GitHub\nYou don’t have to use git and GitHub when writing a package, but there are many advantages if you are do.\nYou are probably aware of some of these\n\nVersion control\nCollaboration\nIssue tracking - for bug reports or feature requests\nDistribution - people can install your package directly from GitHub.\n\nA fourth is that you can use GitHub actions. GitHub actions will perform some action on your repo. For example, the github action called “check-standard” will check the package works on the latest version of R on linux, macOS and Windows every time we push a commit. This is essential if you want your package to be released on CRAN, but useful anyway, as it can find problems that are not apparent on your own computer.\nSee the Biostats git and GitHub tutorial for how to make a GitHub repo for your package. To set up GitHub actions, just run the following command, then commit the files it generates and push.\n\nusethis::use_github_action(\"check-standard\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Creating the package infrastructure</span>"
    ]
  },
  {
    "objectID": "03-package-contents.html",
    "href": "03-package-contents.html",
    "title": "\n4  Package Contents\n",
    "section": "",
    "text": "4.1 Basic workflow\nBecause there are usually lots of errors to fix, it is sensible to build the package slowly, testing it frequently.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Package Contents</span>"
    ]
  },
  {
    "objectID": "03-package-contents.html#basic-workflow",
    "href": "03-package-contents.html#basic-workflow",
    "title": "\n4  Package Contents\n",
    "section": "",
    "text": "Write tests (Section 4.2)\nWrite functions (Section 4.3) and documentation (Section 4.4)\nCheck package (Section 4.7)\nFix errors goto 3\nTest drive with devtools::load_all()\n\nBuild and install (Section 4.8)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Package Contents</span>"
    ]
  },
  {
    "objectID": "03-package-contents.html#sec-tests",
    "href": "03-package-contents.html#sec-tests",
    "title": "\n4  Package Contents\n",
    "section": "\n4.2 Tests",
    "text": "4.2 Tests\nYou need to write tests for your package to ensure your functions do what they are supposed to do. They protect you against breaking your package when you edit your code. Tests are run when the package is checked.\nYou can, ideally should, write tests before you write your functions. We can use the testthat package for the tests.\nSet up the testing infrastructure with\n\nusethis::use_testthat()\n\nNow set up a test file for one or more related functions with use_test().\n\nusethis::use_test(name = \"import\")\n\nThis will create and open a file called test-import.R which looks like\n\ntest_that(\"multiplication works\", {\n  expect_equal(2 * 2, 4)\n})\n\nThe first argument of test_that() is a description, second argument is an expression which contains the test. More complex tests might need some additional set-up code in the expression. There are several expect_*() functions to test different aspects of the function, including that errors and warnings are thrown as expected. Each test_that() call can test multiple expectations. You can have multiple test_that() calls per file.\n\n\n\n\n\n\ntests for import functions\n\n\n\nIf you are writing a package that imports data from files, you need to test this. You can save files for testing in the “tests/testthat” directory. When you load them you will need to testhat::test_path() so the file can be found.\nFor example, if you wanted to test if function my_import() could correctly import a file (“tests/testthat/testdata.csv”) with the correct number of rows, we could use\n\ntest_that(\"import works\", {\n  path &lt;- test_path(\"testdata.csv\")\n  import &lt;- my_import(path)\n  expect_equal(nrow(inport), 10)\n})\n\nYou can have multiple expectations in each test.\n\n\nLook for examples of tests on GitHub if you need inspiration.\nFunctions are much easier to test if the functions do one job. This is also best practice when writing functions. For example, if you were writing a package to import, process, and plot logger data, you would make at least three functions to do this, not one function that does everything.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Package Contents</span>"
    ]
  },
  {
    "objectID": "03-package-contents.html#sec-functions",
    "href": "03-package-contents.html#sec-functions",
    "title": "\n4  Package Contents\n",
    "section": "\n4.3 Functions",
    "text": "4.3 Functions\nFunctions live in the R/ directory in files with the extension .R. You can have one or more functions in a file.\nFunctions are made with the keyword function, can have one or more arguments separated by commas, and needs assigning to a name.\n\nmy_function &lt;- function(arg1 = 1, arg2) {\n  arg1 * arg2\n}\n\nmy_function(3, 4)\n\nFunctions need to be saved in R/. Related functions can be saved in the same file.\n\n4.3.1 Well behaved functions\nTry not to alter the state of the users R session. Don’t include calls to library() or require() in functions (see Section 4.4.1). If you need to change the state, then revert it with when the function finishes. You can do this with withr::defer(). This is better behaved than the base R equivalent on.exit(). Even if the function throws an error, the state of options will be reverted to its original state.\n\nmy_function &lt;- function(x) {\n  op &lt;- options(digits = 1) # set options\n  withr::defer(options(op)) # next line\n  print(x)\n}\n\n\n4.3.2 Data validation - expect the unexpected.\nIf you are going to release your package, you need to try to make it idiot proof. Assume users will make mistakes with their data input. Use code to validate that the data are correct, or else throw an error. if statements and stop() are useful here.\n\nmy_function &lt;- function(arg1 = 1, arg2) {\n  if (!is.numeric(arg1) || !is.numeric(arg2)) {\n    stop(\"Arguments arg1 and arg2 must be numeric\")\n  }\n  arg1 * arg2\n}\n\nmy_function(3, \"4\")\n\nError in my_function(3, \"4\"): Arguments arg1 and arg2 must be numeric\n\n\n\n4.3.3 S3 classes in R\nWhen you use a generic function in R such as plot(), print(), autoplot() or summary(), what happens is that the class of the object in determined and dispatched to the appropriate function, which will have the name of the generic followed by the name of the class, separated by a dot.\nSo a call to plot() with an object of class cca will be dispatched to plot.cca.\nYou can find out the class of an object with class()\nThe class of an object can be set with class().\n\nmy_function &lt;- function() {\n  result &lt;- complex_logic()\n  class(result) &lt;- \"my_class\"\n  result\n}\n\nIf the object already has a class and you want to keep it, you need something like\n\nclass(result) &lt;- c(\"my_class\", class(result))\n\nTo make a print() or plot() method for my_class, we simply make a function called print.my_class or plot.my_class. The method will be declared automatically when the documentation (Section 4.4) is made.\n\n\n\n\n\n\nGoing further with classes\n\n\n\n\nMake your own generics\n\nUse the more formal S4 or R6 class systems\n\n\n\n\n4.3.4 Ellipses …\nEllipses can be used in two ways when writing functions.\nThe first is to pass unknown arguments to a second function (e.g., plot.cca()).\nIf we make a plot.my_class() function we can use the ellipses so we don’t need to specify all the possible arguments in plot.\n\nplot.my_class &lt;- function(obj, ...) {\n  # logic to prepare data for plotting\n  x &lt;- obj$x\n  y &lt;- obj$y\n  plot(x, y, ...)\n}\n\nNow all of arguments to plot.default() can be used.\nThe second way to use ellipses is when there are a variable number of arguments. We can capture the ... using list(), and then process it further.\n\ndot_to_list &lt;- function(...) {\n  list(...)\n}\n\ndot_to_list(1, 2, \"c\")\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] \"c\"\n\n\n\n4.3.5 Using dplyr, ggplot2 etc\nTidyverse packages such as dplyr and ggplot2 which use Non-Standard Evaluation (NSE) are great for using in a script but a little challenging to use in functions.\nWe cannot just do something like this as we get an error\n\nmy_select &lt;- function(data, col) {\n  select(data, col)\n}\n\nmy_select(penguins, col = species)\n\nError in eval(expr, envir, enclos): object 'species' not found\n\n\nOne solution is to use the curly-curly notation\n\n# select\nmy_select2 &lt;- function(data, col) {\n  select(data, {{ col }})\n}\n\nmy_select2(penguins, col = species)\n\n# A tibble: 344 × 1\n   species\n   &lt;fct&gt;  \n 1 Adelie \n 2 Adelie \n 3 Adelie \n 4 Adelie \n 5 Adelie \n 6 Adelie \n 7 Adelie \n 8 Adelie \n 9 Adelie \n10 Adelie \n# ℹ 334 more rows\n\n# filter\nmy_filter &lt;- function(data, col, `%test%`, value) {\n  filter(data, {{ col }} %test% value)\n}\n\nmy_filter(penguins, col = species, `%test%` = `==`, value = \"Adelie\")\n\n# A tibble: 152 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 142 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n# mutate Note the := operator.\nmy_mutate &lt;- function(data, col1, col2, sum_col) {\n  mutate(data, {{ sum_col }} := {{ col1 }} + {{ col2 }})\n}\n\nmy_mutate(penguins, bill_length_mm, bill_depth_mm, sum_col = bill)\n\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 3 more variables: sex &lt;fct&gt;, year &lt;int&gt;, bill &lt;dbl&gt;\n\n# ggplot\nmy_plot &lt;- function(data, x, y) {\n  ggplot(data, aes(x = {{ x }}, y = {{ y }})) +\n    geom_point()\n}\n\nmy_plot(penguins, x = bill_length_mm, y = body_mass_g)\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nAnother is to have the arguments as strings and use the .data pronoun from rlang (don’t forget to import rlang (see Section 4.4.1).\n\nmy_select3 &lt;- function(data, col) {\n  select(data, .data[[col]])\n}\n\nmy_select3(penguins, col = \"species\")\n\nWarning: Use of .data in tidyselect expressions was deprecated in tidyselect 1.2.0.\nℹ Please use `all_of(var)` (or `any_of(var)`) instead of `.data[[var]]`\n\n\n# A tibble: 344 × 1\n   species\n   &lt;fct&gt;  \n 1 Adelie \n 2 Adelie \n 3 Adelie \n 4 Adelie \n 5 Adelie \n 6 Adelie \n 7 Adelie \n 8 Adelie \n 9 Adelie \n10 Adelie \n# ℹ 334 more rows\n\n\nNSE can also be a problem for functions that don’t take column names as arguments.\n\nprocess_penguin_type_data &lt;- function(data) {\n  data |&gt;\n    group_by(species) |&gt;\n    summarise(bill = mean(bill_length_mm))\n}\n\nThe this function should work, but will generate a note in the checking stage. as the check does not recognise species or bill_length_mm.\n&gt; checking R code for possible problems ... NOTE\n  process_penguin_type_data: no visible binding for global variable\n    ‘species’\n  process_penguin_type_data: no visible binding for global variable\n    ‘bill_length_mm’\n  Undefined global functions or variables:\n    bill_length_mm species\nTo fix this, either declare these variables as global with this line added to the file (outside the function).\n\nutils::globalVariables(c(\"bill_length_mm\", \"species\"))\n\nOr, perhaps better, use the .data pronoun.\n\nprocess_penguin_type_data &lt;- function(data) {\n  data |&gt;\n    group_by(.data$species) |&gt;\n    summarise(bill = mean(.data$bill_length_mm))\n}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Package Contents</span>"
    ]
  },
  {
    "objectID": "03-package-contents.html#sec-documentation-with-roxygen2",
    "href": "03-package-contents.html#sec-documentation-with-roxygen2",
    "title": "\n4  Package Contents\n",
    "section": "\n4.4 Documentation with Roxygen2",
    "text": "4.4 Documentation with Roxygen2\nThe documentation for the package lives in man/ in .Rd files. The files are written in a LaTeX like language, that is quite hard to get to right. Fortunately, the roxygen2 package takes most of the pain away as the format is much simpler. Also, some parts of the documentation are automatically generated by inspecting the code, and it is easier to keep the documentation and code in sync because the are in the same file.\nThe roxygen2 comments sit above the function, and start with #' to distinguish them from ordinary comments.\nThe first sentence of the roxygen becomes the title of the help file. Then we can use roxygen tags for the rest of the documentation. Roxygen tags all start with an @. Once you type this, RStudio gives you suggestions.\n@description One paragraph description of what the function does.\n@param argument_name followed by a description of the argument All parameters must be documented.\n@details All the gory details. Possibly several paragraphs (separate with a blank line).\n@return A description of the object returned by the function (if any)\n@examples Working examples which will be run when the package is tested. Examples should run relatively quickly or they become tedious. They need to use library() to load any packages needed other than the package being developed. Any packages loaded by library() need to be declared in the DESCRIPTION file (see Section 4.4.1)\nYou can use markdown to enhance the documentation, including links etc.\n\n4.4.1 Importing functions\nThe roxygen comments are also where you import functions from other packages. This information will be written into the NAMESPACE file so you don’t have to (see the R package book for more information about this file).\nIf you want to use a function from any other package (except base) you need to add the dependency to the package to the DESCRIPTION file.\n\nuse_package(\"dplyr\")\n# use_dev_package(\"packageFromGithub\")\n\nYou can now use a function from dplyr with dplyr::mutate. This gets messy if you need to use lots of functions from a package. Then it is better to import them. We could use\n#' @import dplyr\nto import all functions in the package, or\n#' @importFrom dplyr mutate\nif we want to just import specific functions. This is safer as it minimises the risk of conflicts. This can be tedious to write if you want to import many function. The autoimport package can add the imports (mostly) automatically.\nForgetting to import functions or to declare the dependencies in the DESCRIPTION file are very common problems when checking the package, but the message is informative (Chapter 7).\n\n4.4.2 Exporting functions\nIf you want to make your function available to users you normally need to export them. You can do this by adding @export to the roxygen comments.\nFunctions extending S3 generics (e.g. plot.myclass()) don’t need to be exported, but it makes it easier for the user to find your function and access the help file.\nOther functions that are not exported are internal to the package, they can be accessed by the user with mypackage:::unexported() but they should not need to do this.\n\n4.4.3 Generate the .Rd files\nConvert the roxygen comments to .Rd files with\n\ndevtools::document()\n\nView the compiled help files by running\n\ndevtools::load_all()\n\nwhich simulates loading the package without having to install it properly. Then you can use ? as normal to get the help (links won’t work)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Package Contents</span>"
    ]
  },
  {
    "objectID": "03-package-contents.html#data",
    "href": "03-package-contents.html#data",
    "title": "\n4  Package Contents\n",
    "section": "\n4.5 Data",
    "text": "4.5 Data\nMany packages include data, either because they are needed for examples, or because the aim of the package is to distribute a dataset (probably with some functions to access it).\nData are stored in data/ as .rda files and can be loaded into R with the data() function.\n\ndata(\"penguins\", package = \"palmerpenguins\")\n\nThe best way to add .rda files is to use the function use_data_raw() with the name of the dataset you want create.\n\nuse_data_raw(name = \"dataset1\")\n\nThis will create data_raw/ and add a file called dataset1.R that looks like this.\n\n## code to prepare `dataset1` dataset goes here\n\nusethis::use_data(dataset1, overwrite = TRUE)\n\nAdd the code needed to reproducibly create dataset1, perhaps importing and processing data files that you have copied into data-raw/.\nWhen you run the entire script, the code will create dataset1.rda in data/.\n\n4.5.1 Documenting data\nData in data/ need to be documented. Write the documentation for the data using roxygen2 and save it in R/. I usually call this file data.R and document all the datasets in it.\nIn my traitstrap package, one of the data objects is called trait. Here is the entry from R/data.R:\n#' Trait data\n#'\n#' A dataset containing plant traits in control plots on Svalbard from PFCT4\n#' TraitTrain course.\n#'\n#' @format A data frame with 53940 rows and 10 variables:\n#' \\describe{\n#'   \\item{Taxon}{species name}\n#'   \\item{Site}{site name}\n#'   \\item{PlotID}{plot name}\n#'   \\item{Trait}{trait name with unit}\n#'   \\item{Value}{trait value}\n#' }\n#' @source \\url{http://https://www.uib.no/en/rg/EECRG/114808/plant-functional-traits-course-4}\n\"trait\"\nThe first line gives the title followed by the desciption. The @format field lets you describe the data. The last line has the object name in quotes (note no #' first).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Package Contents</span>"
    ]
  },
  {
    "objectID": "03-package-contents.html#adding-other-files",
    "href": "03-package-contents.html#adding-other-files",
    "title": "\n4  Package Contents\n",
    "section": "\n4.6 Adding other files",
    "text": "4.6 Adding other files\nR gets upset if there are files where they are not supposed to be in the R package. You cannot put extra files into the package root directory. The solution is to put extra files into subdirectories in inst/.\nIf you want to include raw data files because your package has functions to process them, they can go in inst/extdata/.\nWhen the package is compiled, inst/ will be removed and extdata/ will be put into the package root directory. The path to the file can the be accessed with system.file().\n\npath &lt;- system.file(\"extdata\", package = \"readr\")\nlist.files(path)\n\nTutorials and other resources can also be put into suitable directories in inst/.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Package Contents</span>"
    ]
  },
  {
    "objectID": "03-package-contents.html#sec-checking",
    "href": "03-package-contents.html#sec-checking",
    "title": "\n4  Package Contents\n",
    "section": "\n4.7 Checking",
    "text": "4.7 Checking\nNow we are ready to check the package compiles correctly. The check function is slow (it checks many aspects of the package), so before running it, run some functions that check different aspects of the package.\n\n# build the documentation\ndevtools::document()\n\n# check the examples work\ndevtools::run_examples()\n\n# check the tests work\ndevtools::test()\n\nAfter fixing any problems, check the entire package either with the Check button in the Build tab (in the same panel as the Environment tab), or with devtools::check(). They do exactly the same work, but the Check button leaves the console available.\nCheck is very thorough. It will almost certainly report errors, warnings or notes the first times you run it. Identify the problems, fix them and run check again.\nNow use\n\ndevtools::load_all()\n\nand give your functions a test drive.\n\n\n\n\n\n\nDon’t source() functions\n\n\n\nYou must resist the temptation to source() your functions (or otherwise load them through the RStudio interface).\nThis will cause problems for devtools::load_all() as the sourced functions will mask the versions loaded by load_all(), and may not work properly. Either delete any functions you have sourced, or restart your R session.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Package Contents</span>"
    ]
  },
  {
    "objectID": "03-package-contents.html#sec-build-and-install",
    "href": "03-package-contents.html#sec-build-and-install",
    "title": "\n4  Package Contents\n",
    "section": "\n4.8 Build and install",
    "text": "4.8 Build and install\nWhen you are happy with your package, use the “Install” button in the build tab to install your package. Now you can load it with library() as you would any other package.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Package Contents</span>"
    ]
  },
  {
    "objectID": "04-more-documentation.html",
    "href": "04-more-documentation.html",
    "title": "\n5  More documentation\n",
    "section": "",
    "text": "5.1 readme.md for GitHub\nYour GitHub repo needs a readme file to explain to users how to install the package and get started.\nYou can create readme.Rmd with\nusethis::use_readme_rmd()\nThis will create a draft for you to fill in and knit, and set git hooks to remind you to commit both the readme.Rmd and the resulting readme.md together. Do not edit the readme.md by hand. If you don’t want any R code in the readme, you can use usethis::use_readme_md() instead.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>More documentation</span>"
    ]
  },
  {
    "objectID": "04-more-documentation.html#vignettes",
    "href": "04-more-documentation.html#vignettes",
    "title": "\n5  More documentation\n",
    "section": "\n5.2 Vignettes",
    "text": "5.2 Vignettes\nA vignette is a long-form documentation for your package. It can be anything from a walk-through of how to use the package to a detailed explanation of the implementation.\nCreate a vignette with:\n\nusethis::use_vignette(\"my-vignette\")\n\nwhich will modify the DESCRIPTION file, and draft the R markdown file vignettes/my-vignette.Rmd. Fill it in and knit it.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>More documentation</span>"
    ]
  },
  {
    "objectID": "04-more-documentation.html#a-package-website",
    "href": "04-more-documentation.html#a-package-website",
    "title": "\n5  More documentation\n",
    "section": "\n5.3 A package website",
    "text": "5.3 A package website\npackagedown is an amazing package that takes your packages help files and vignettes and makes them into a website that you can host on GitHub.\nFor a minimal website, you need and run\n\n# Run *once* to configure package to use pkgdown\nusethis::use_pkgdown()\n# Run to build the website\npkgdown::build_site()\n\nCommit and push the built webpages, the configure your GitHub repo to support publishing (about 5 clicks).\nYou can even set up GitHub actions to build the website automatically after every push.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>More documentation</span>"
    ]
  },
  {
    "objectID": "05-distributing.html",
    "href": "05-distributing.html",
    "title": "\n6  Distributing your package\n",
    "section": "",
    "text": "If your package is in a public repo on GitHub, you don’t have to do anything more. Users can install it with\n\nremotes::install_github(\"my-user-name/myPackageName\")\n\nYou can also submit your package to CRAN for consideration. This is a lot more work than using GitHub for distribution, but will make your package available to a wider audience. See the R package book section on CRAN for how to do it. The function devtools::release() can guide you through the process.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Distributing your package</span>"
    ]
  },
  {
    "objectID": "06-troubleshooting.html",
    "href": "06-troubleshooting.html",
    "title": "7  Troubleshooting",
    "section": "",
    "text": "7.1 Warning ‘library’ or ‘require’ call\nThese are some errors, warnings and notes you might find with check and how to fix them.\nDiagnosis: you have a library() call in one of your functions.\nSolution: see Section 4.4.1 for how to import functions correctly.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  },
  {
    "objectID": "06-troubleshooting.html#warning-library-or-require-call",
    "href": "06-troubleshooting.html#warning-library-or-require-call",
    "title": "7  Troubleshooting",
    "section": "",
    "text": "&gt; checking dependencies in R code ... WARNING\n  'library' or 'require' call not declared from: ‘dplyr’\n  'library' or 'require' call to ‘dplyr’ in package code.\n    Please use :: or requireNamespace() instead.\n    See section 'Suggested packages' in the 'Writing R Extensions' manual.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  },
  {
    "objectID": "06-troubleshooting.html#note-no-visible-global-function-definition",
    "href": "06-troubleshooting.html#note-no-visible-global-function-definition",
    "title": "7  Troubleshooting",
    "section": "7.2 Note no visible global function definition",
    "text": "7.2 Note no visible global function definition\n  my_function: no visible global function definition for\n    ‘rnorm’\n  Undefined global functions or variables:\n    rnorm\n  Consider adding\n    importFrom(\"stats\", \"rnorm\")\n  to your NAMESPACE file.\nDiagnosis: you have used a function from another package other than base in function my_function without importing it.\nSolution: see Section 4.4.1 for how to import functions correctly.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  },
  {
    "objectID": "06-troubleshooting.html#error-invalid-namespace-file",
    "href": "06-troubleshooting.html#error-invalid-namespace-file",
    "title": "7  Troubleshooting",
    "section": "7.3 Error Invalid NAMESPACE file",
    "text": "7.3 Error Invalid NAMESPACE file\n&gt; checking package namespace information ... ERROR\n  Invalid NAMESPACE file, parsing gives:\n  Error in asChar(ivars): empty name in directive 'importFrom' in 'NAMESPACE' file\n  \n  See section ‘Package namespaces’ in the ‘Writing R Extensions’ manual.\nDiagnosis: A package has been imported with @import or @importFrom in roxygen comments but not added to the DESCRIPTION file.\nSolution: Delete the malformed NAMESPACE file. Then add the missing package to the DESCRIPTION file with use_package() (see Section 4.4.1).",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  },
  {
    "objectID": "06-troubleshooting.html#note-no-visible-binding-for-global-variable",
    "href": "06-troubleshooting.html#note-no-visible-binding-for-global-variable",
    "title": "7  Troubleshooting",
    "section": "7.4 Note no visible binding for global variable",
    "text": "7.4 Note no visible binding for global variable\n&gt; checking R code for possible problems ... NOTE\n  my_function: no visible binding for global variable\n    ‘species’\n  Undefined global functions or variables:\n     species\nDiagnosis: You are probably using dplyr, ggplot2 or related packages.\nSolution: Use the .data pronoun or declare global variables (see Section 4.3.5).",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  },
  {
    "objectID": "06-troubleshooting.html#note-non-standard-filedirectory-found-at-top-level",
    "href": "06-troubleshooting.html#note-non-standard-filedirectory-found-at-top-level",
    "title": "7  Troubleshooting",
    "section": "7.5 NOTE Non-standard file/directory found at top level",
    "text": "7.5 NOTE Non-standard file/directory found at top level\n&gt; checking top-level files ... NOTE\n  Non-standard file/directory found at top level:\n    ‘extra.R’\nDiagnosis: You have an unexpected file in the package’s root directory.\nSolution: Add this file to .Rbuildignore, or move it to a more appropriate place, perhaps inst/.\n\n\n\n\n\n\nFurther reading\n\n\n\n\nWickham, H. and Bryan, J. R Packages\nWickham, H. Advanced R\nWriting R Extensions Official documentation from CRAN.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  }
]