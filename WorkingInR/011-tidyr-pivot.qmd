``` {r setup, include=FALSE}
source("R/setup.R")
```

# Tidying data with `tidyr` {#sec-tidying-data-with-tidyr}

## Tidy data

Before you can start analysing or plotting data, you often need to tidy it.
[Tidy data](https://tidyr.tidyverse.org/articles/tidy-data.html) is a standardised way to structure a dataset which makes it much easier to process, analyse and plot the data.
Functions in the `tidyr` and `dplyr` packages, both part of tidyverse, can be very useful for tidying data.

```{r load-tidyr}
library(tidyr)
```


*Tidy data* is a standard, consistent way to organize tabular data. 
Briefly, tidy data follows a short series of rules:

+ each variable in the data set is presented in a specific column,
+ each observation in the data set is presented in a specific row,
+ each cell at the intersection of a row and a column contains a single value.

The following figure illustrates these rules.

``` {r}
#| label: threerules
#| echo: false
#| fig-cap: >
#|   In a tidy dataset, variables are in columns, observations are in rows,
#|   and values are in cells. --- Source:
#|   [R for Data Science](https://r4ds.had.co.nz/tidy-data.html)'
#| fig-alt: >
#|   Schematic diagram showing that variables should be in columns,
#|   observations in rows and each cell should contain a single value
#| out.width: "100%"
knitr::include_graphics("figures/tidy1.png")
```


The dataset presented in @tbl-kable respects all three rules, and is thus a tidy dataset.  

On the contrary, the following dataset is *not* tidy:
``` {r}
#| label: tidy
#| echo: false
#| message: false
table2 <- read_delim(file = "data/nottidy.csv")
gt::gt(table2)
```
Indeed, at least one of the rules is broken since columns display data matching several variables (Date, time, Weather, etc).   

Importing data from a file containing tidy data is a great way to start your work, but it is *not* a prerequisite to data import.
As long as your data is tabular, you will be able to import it in R, and tidy it later.

The process of tidying data is to convert the data you have to data that meets this standard.


## Multiple values in a cell

If a cell contains multiple values, we need to separate to tidy the data. 
We can separate the values into multiple columns with `tidyr::separate_wider_delim()`.
For example, in this small dataset, site code and plot number have been combined into one column separated by a hyphen.

```{r separate-data}
dat <- tribble(
  ~id, ~value,
  "A-1", 1,
  "A-2", 2,
  "B-1", 3
)

dat
```
We can use `separate_wider_delim()` to split site and plot into separate columns.
The delimited is set by the `delim` argument.

```{r separate}
dat |>
  separate_wider_delim(cols = id, delim = "-", names = c("site", "plot"))
```

Related function, `separate_wider_regex()`, which uses regular expressions to split the column, can be more flexible. 

If there are multiple measurements of the same type in a single cell, then  `tidyr::separate_longer_delim()` can be useful to separate the data into multiple rows.


## Reshaping data - wide to long 

It is very common to need to reshape data to make it tidy.
This can be done with the `pivot_*` functions.

```{r pivot-anim, echo=FALSE, out.width = "400px", fig.cap = "Wide data to long data with `pivot_longer()` and `pivot_wider()` ."}
knitr::include_graphics("figures/tidyr-pivot_longer_wider.gif")
```


These are some Bergen climate data from [Wikipedia](https://no.wikipedia.org/wiki/Bergen) (NB for demonstration only wikipedia is not a good source of climate data - use [seklima](https://seklima.met.no/) for Norwegian data).

```{r, bergen_klima, echo = FALSE}
bergen_klima <- read_delim(
  "Måned 	Jan 	Feb 	Mar 	Apr 	Mai 	Jun 	Jul 	Aug 	Sep 	Okt 	Nov 	Des
Normal maks. temp. °C 	3.6 	4.0 	5.9 	9.1 	14.0 	16.8 	17.6 	17.4 	14.2 	11.2 	6.9 	4.7
Døgnmiddeltemp. °C 	1.7 	1.7 	3.3 	5.8 	10.4 	13.1 	14.2 	14.2 	11.5 	8.8 	4.8 	2.7
Normal min. temp. °C 	-0.4 	-0.5 	0.9 	3.0 	7.2 	10.2 	11.5 	11.6 	9.1 	6.6 	2.8 	0.6
Nedbør (mm) 	190 	152 	170 	114 	106 	132 	148 	190 	283 	271 	259 	235",
  delim = "\t", trim_ws = TRUE
)
bergen_klima
```

This might be a nice way to present the data but it is not tidy data:
each row is not an observation; each column is not a variable.

We can use `pivot_longer()` to reshape the data. 
The months, selected by the `cols` argument in the column names (see @sec-select-helpers for more on the syntax used here) will become a new variable with a name set by the `names_to`, and the data values get put into a column named by the `values_to` argument. 


```{r pivot-long}
bergen_klima_long <- bergen_klima |>
  pivot_longer(cols = Jan:Des, names_to = "Month", values_to = "value")
bergen_klima_long
```

The data are now tidier, but it would probably be more useful to reshape the data again, and have a column for each climate variable.
We can do this `pivot_wider()`.

## Reshaping data - long to wide

We can tell `pivot_wider()` which column contains what will become the column names and the data with the `names_from` and `values_from`, respectively.

```{r pivot-wider}
bergen_klima_wider <- bergen_klima_long |>
  pivot_wider(names_from = "Måned", values_from = "value")

bergen_klima_wider
```

The data are now in a convenient format for plotting or analysis.

::: callout-note
## Exercise

With the Mt Gonga data downloaded previously, pivot the data so that the height data (H1-H10) are in one column.

 <details>
  <summary>Hint</summary>
`pivot_longer`
</details> 

:::

::: callout-note
## Further reading

- [tidy data vignette]( https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html){target="_blank"}
 - [tidyr cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/tidyr.pdf){target="_blank"}
 
::: 

::: {.column-margin}
### Contributors {.unlisted .unnumbered}

-   Richard Telford
:::
