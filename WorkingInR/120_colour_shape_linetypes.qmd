---
execute: 
  warning: false
---


``` {r setup, include=FALSE}
source("R/setup.R")
```

# Colours, shapes and linetypes {#sec-colours-shapes-and-linetypes}

## Colours and fill {#sec-colours-and-fill}

The `colour` aesthetic give colour for points and lines, while the `fill` aesthetic gives colour to areas.
It is very easy to forget this.

```{r wrong-aes, fig.cap = "Use fill for areas.", fig.height= 3, fig.width = 3.5, message=FALSE}
ggplot(penguins, aes(x = bill_length_mm, colour = species)) +
  geom_histogram()
```

You can set the colour of points or lines and the fill of areas by setting it in the `geom_*()` used.

```{r fill-colour-set, fig.height = 3, fig.width = 3.5}
ggplot(penguins, aes(x = flipper_length_mm)) +
  geom_histogram(colour = "purple", fill = "pink")
```


If you map a variable to the `colour` aesthetic, for points and lines, or the `fill` aesthetics for areas, ggplot will give you different colours/fills for the different values in the variable.
If you don't like the default colours/fills, and you shouldn't because they are not colour blind friendly, then you can change them with a `scale_colour_*()` or `scale_fill_*()`.
First you need to decide what type of colour/fill scale you need.

The first decision is whether the scale should be continuous or discrete.



### Discrete colour/fill scales

Discrete scales are automatically used when the variable mapped to colour or fill is a character or factor variable.
If you want to use a discrete scale on a numeric variable, for example, if 0 represents Male and 1 represents Female (this is a bad idea), then you need to coerce it to a factor with `factor()`. 
If you don't do this, you will get an error.

There is a choice of four types of discrete colour/fill scales

 - Qualitative for categorical variables
 - Sequential for ordinal variables
 - Diverging for ordinal variables with a natural midpoint.
 - Highlights when you want to focus on only some of the data.

#### Qualitative

Qualitative palettes have no natural order to the colours. 
Use them for categorical variables.
In the `penguins` dataset, species, island, and sex are categorical variables.

```{r qual-fills}
ggplot(penguins, aes(x = flipper_length_mm, fill = species)) +
  geom_density()
```

You can change the default colours/fill by either picking your own colours with `scale_colour_manual()` or `scale_fill_manual()`.

```{r qual-manual, fig.width = 3.5, fig.height = 3}
ggplot(penguins, aes(x = flipper_length_mm, fill = species)) +
  geom_density() +
  scale_fill_manual(values = c(
    Adelie = "pink",
    Chinstrap = "purple",
    Gentoo = "green"
  ))
```

Picking your own colours can be hard!

Normally better to use some built in qualitative palettes, for example these from the `RColorBrewer` package.

```{r qual-brewer, fig.height = 4}
RColorBrewer::display.brewer.all(type = "qual")
```
You can use these with `scale_colour_brewer()` or `scale_fill_brewer()`

```{r qual-set1, fig.width = 3.5, fig.height = 3}
ggplot(penguins, aes(x = flipper_length_mm, fill = species)) +
  geom_density() +
  scale_fill_brewer(palette = "Set1")
```

#### Sequential

Sequential colour/fill scales are useful for ordinal variables - for example, high, medium, and low concentrations of a treatment drug.

Here are some examples from the `RColorBrewer` package, which can be used as above.

```{r seq-brewer, fig.height = 4}
RColorBrewer::display.brewer.all(type = "seq")
```
Another example of a sequential colour/fill palette is viridis, which can be used with `scale_fill_viridis_d()`. 


#### Diverging 

Diverging colour/fill scales are useful for ordinal variables with a natural midpoint, which might be zero, or the mean of the data.

Here are some examples from the `RColorBrewer` package, which can be used as above.

```{r div-brewer, fig.height = 4}
RColorBrewer::display.brewer.all(type = "div")
```

#### Highlights {#sec-highlight}

Highlights are useful when you want to focus on some of the data by showing it in colour and setting the remainder to grey.
You can do this in several ways, but the easiest is to use the `gghighlight` package.

`gghighlight` takes a logical statement which determines which points or lines get coloured. 
This plot focuses on the Adelie penguins.

```{r highlights, fig.height = 3.5, fig.width = 3.5, message=FALSE}
library(gghighlight)
ggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, colour = species)) +
  geom_point() +
  gghighlight(species == "Adelie")
```




### Continuous colour/fill scales

Continuous colour/fill scales are used for continuous variables. 
They can be directional or diverging.

You can make your own continuous colour/fill scales with `scale_colour_gradient()` with two colours of your choice.
`scale_fill_gradient2()` will make a diverging scale by adding a mid-point colour.

It can be better to use existing colour scales.
`scale_fill_viridis_c()` is a popular continuous scale.
You can also use interpolated versions of `RColorBrewer` palettes with `scale_fill_distiller()`.

Continuous colour/fill scales also can be binned (just a a histogram bins the data on the x-axis) with `scale_fill_binned()`, `scale_fill_viridis_b()`for binned viridis palettes, or `scale_colour_fermenter()` for binned `RColorBrewer` palettes.

There are many examples of colour palettes in the `paletteer` package


### Colour blind friendly colours

About 1/8 men and 1/200 women are colour blind.
We need to use colour and fill palettes that are colourblind friendly.
Some popular scales are not. 
For example, we can use the `colorBlindness` to simulate how this figure is perceived by people with different forms of colour vision deficiency.

```{r not-colourblind-friendly, fig.cap = "Default ggplot fill.", fig.height = 3, fig.width=3.5}
p3 <- ggplot(penguins, aes(x = flipper_length_mm, fill = species)) +
  geom_density(alpha = 0.5) +
  scale_fill_discrete()
p3
```



```{r colour-blindr-default, echo = TRUE, fig.cap = "How people with different types of colourblindness see the default colour scale."}
library(colorBlindness)
cvdPlot(p3)
```

That was hopeless. 
It won't even print well in black and white (shown by the Desaturated panel). 
Let's try a different palette.

```{r viridis-colourblind, fig.cap = "Viridis fill.", fig.height = 3, fig.width=3.5, message = FALSE}
p3_v <- p3 + scale_fill_viridis_d()
p3_v
```


```{r viridis-colourblind2, echo = FALSE, fig.cap = "How people with different types of colourblindness see the viridis colour scale."}
cvdPlot(p3_v)
```

Better. 
Always test that your colour palette is colourblind friendly, or use one known to be ok.

## Transparency

Transparency is set by the `alpha` aesthetic, where 0 is completely transparent and 1 is opaque.
The overlap between partially transparent objects is more opaque. 

```{r alpha, fig.width=5, fig.height=2, fig.cap = "Alpha values", echo = FALSE}
tibble(x0 = 0:5, r = 0.5, alpha = x0 / 5) |>
  crossing(y0 = c(0, 0.4)) |>
  ggplot(aes(x0 = x0, y0 = y0, r = r, alpha = I(alpha))) +
  ggforce::geom_circle(fill = "black", show.legend = FALSE) +
  coord_equal() +
  labs(x = "Alpha") +
  scale_x_continuous(expand = c(0.01, 0), breaks = 0:5, labels = 0:5 / 5) +
  theme_bw() +
  theme(
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.grid = element_blank()
  )
```
You can map a variable to `alpha` in `aes()`, but it is probably more common to set `alpha`.
This is very useful, for example, when there are many overlapping points in a scatterplot, or you want to see the data behind the confidence interval of a regression line (@sec-manual-plotting-of-a-linear-model). 
Be careful using transparency when different colours overlap, as it can appear to make a third colour.

 
## Shapes

You can change the shape of all the points made by, for example, `geom_point()` by setting the shape.

```{r shape-set, fig.width = 3, fig.height=3}
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point(shape = 4)
```

If you map a discrete variable to the `shape` aesthetic, points made by `geom_point()`, `geom_pointrange()`, etc will have different shaped points for the different values in the variable.
Many of the shapes are difficult to distinguish when small, so it is usually best to use shape with colour to distinguish groups.
These are the available shapes.

```{r shapes, fig.cap = "Shapes", fig.height=2.5, echo = FALSE}
step <- 9
tibble(shape = 0:25, x = (shape) %% step, y = (shape) %/% step) |>
  ggplot(aes(x = x, y = y, shape = I(shape), label = shape)) +
  geom_point(size = 5, fill = "red") +
  scale_y_reverse(expand = c(0.1, 0)) +
  geom_text(nudge_y = 0.3) +
  theme_void()
```

Shapes 21-24 take a `fill` and a `colour` aesthetic, whereas all the other shapes just take `colour`.

If you want to change the shape from the default shapes, use `scale_shape_manual()`.

```{r scale-shape-manual, fig.width = 3.5, fig.height = 3}
ggplot(
  penguins,
  aes(x = body_mass_g, y = bill_length_mm, colour = species, shape = species)
) +
  geom_point() +
  scale_shape_manual(values = c(Adelie = 17, Chinstrap = 6, Gentoo = 16))
```



## linetypes

You can change the line types of all the lines made by, for example, `geom_line()` by setting the linetype.

```{r chickweight, fig.height = 3, fig.width = 3.5}
ggplot(ChickWeight, aes(
  x = Time,
  y = weight,
  group = Chick,
  colour = Diet
)) +
  geom_line(linetype = "dashed")
```


If you map a discrete variable to the `linetype` aesthetic, lines made by `geom_line`, `geom_path`, etc will have different line types or the different values in the variable.
Line types can sometimes be used in addition to colour to make it easier to differentiate lines.

```{r chickweight2, fig.height = 3, fig.width = 3.5}
ggplot(
  ChickWeight,
  aes(x = Time, y = weight, group = Chick, colour = Diet, linetype = Diet)
) +
  geom_line()
```

If you need to change the linetypes assigned to each value, you can use `scale_linetype_manual` and specify them by name (@fig-linetypes).

```{r}
#| label: fig-linetypes
#| fig-height: 2.5
#| fig-width: 3
#| fig-cap: "Some named linetypes"
#| echo: false

tibble(
  label = c("blank", "dotted", "dashed", "longdash", "solid"),
  y = 5:1
) |>
  ggplot(aes(x = 0, xend = 1, y = y, yend = y, linetype = I(label))) +
  geom_segment(show.legend = FALSE) +
  geom_text(aes(label = label), x = 0.5, nudge_y = 0.3) +
  theme_void()
```

Custom linetypes can also be made using of up to eight hexadecimal digits (1-9, A-F) that give the length of lines and gaps.
`"1FFF"` would draw a dot followed by a long gap, a long line, and another long gap, and then the pattern would repeat.

::: {.column-margin}
### Contributors {.unlisted .unnumbered}

-   Aud Halbritter
-   Richard Telford
:::
